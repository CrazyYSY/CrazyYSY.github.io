<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>第五周java预习</title>
      <link href="/2023/04/20/di-wu-zhou-java-yu-xi/"/>
      <url>/2023/04/20/di-wu-zhou-java-yu-xi/</url>
      
        <content type="html"><![CDATA[<p>MySQL 是一种关系型数据库管理系统，它支持 SQL (Structured Query Language) 语言。下面是 MySQL 的一些基础语法：</p><ol><li>创建数据库：</li></ol><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> database_name<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li>选择数据库：</li></ol><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">USE</span> database_name<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li>创建表：</li></ol><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> table_name <span class="token punctuation">(</span>    column1 datatype<span class="token punctuation">,</span>    column2 datatype<span class="token punctuation">,</span>    column3 datatype<span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>插入数据：</li></ol><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> table_name <span class="token punctuation">(</span>column1<span class="token punctuation">,</span> column2<span class="token punctuation">,</span> column3<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span>value1<span class="token punctuation">,</span> value2<span class="token punctuation">,</span> value3<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol><li>查询数据：</li></ol><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> column1<span class="token punctuation">,</span> column2<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">FROM</span> table_name<span class="token keyword">WHERE</span> condition<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol><li>更新数据：</li></ol><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">UPDATE</span> table_name<span class="token keyword">SET</span> column1 <span class="token operator">=</span> value1<span class="token punctuation">,</span> column2 <span class="token operator">=</span> value2<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">WHERE</span> condition<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol><li>删除数据：</li></ol><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> table_name<span class="token keyword">WHERE</span> condition<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol><li>删除表：</li></ol><pre class="line-numbers language-pgsql" data-language="pgsql"><code class="language-pgsql">DROP TABLE table_name;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li>删除数据库：</li></ol><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">DROP</span> <span class="token keyword">DATABASE</span> database_name<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这些是 MySQL 的基础语法，还有其他许多复杂的和高级的语法可以用于更高级的操作。</p><p>MySQL 是一种功能强大的数据库管理系统，它支持广泛的 SQL 语言特性和功能。以下是一些进阶的 MySQL 语法：</p><ol><li>聚合函数：MySQL 支持多种聚合函数，如 COUNT, SUM, AVG, MIN, MAX 等。这些函数可以用于计算某个列的总数、平均值、最大值、最小值等等。</li><li>JOIN：JOIN 操作可以将两个或多个表中的行连接起来。MySQL 支持多种 JOIN 操作，如 INNER JOIN, LEFT JOIN, RIGHT JOIN 等。</li><li>子查询：子查询是一个嵌套在其他查询中的查询语句。使用子查询可以在执行查询时动态生成一个结果集，然后将其用于主查询中。</li><li>索引：索引是一种数据结构，可以加快数据库查询的速度。MySQL 支持多种索引类型，如 B-Tree, Hash 等。</li><li>存储过程和函数：存储过程和函数是一种在数据库中保存的程序代码，可以被多个应用程序调用。使用存储过程和函数可以实现复杂的数据处理逻辑。</li><li>触发器：触发器是一种特殊的程序代码，可以在数据库中特定的事件发生时被自动执行。MySQL 支持多种触发器类型，如 BEFORE INSERT, AFTER INSERT 等。</li></ol><p>这些是 MySQL 的一些进阶语法，它们可以帮助你更好地管理和处理数据库。</p>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> 预习作业 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第四周java预习</title>
      <link href="/2023/04/13/di-si-zhou-java-yu-xi/"/>
      <url>/2023/04/13/di-si-zhou-java-yu-xi/</url>
      
        <content type="html"><![CDATA[<h2 id="发展历程介绍"><a href="#发展历程介绍" class="headerlink" title="发展历程介绍"></a>发展历程介绍</h2><p>从Servlet,JSP再到一直用的现在的MVC。MVC只是分层思想,不是什么技术,主要包括前端控制器,基于Servlet实现,业务模型和视图解析器。</p><p>第一阶段,只使用Servlet,继承HTTPServlet,实现doGet和doPost方法,然后配置Servlet映射。在doGet和doPost方法中,我们需要从Request中解析入参,然后做业务处理,并拼写好HTML,然后用输出流写回客户端。因为在Servlet中很难维护HTML的渲染逻辑,所以需要把HTML渲染逻辑抽离出去单独维护,然后就诞生了JSP技术。</p><p>第二阶段,在Servlet中做业务处理,并创建数据模型,然后传递到JSP中做HTML渲染。这个阶段,你会发现创建Servlet并配置映射,从Request中解析入参,成为了开发的负担,需要有一个框架自动帮我们处理好这些,然后MVC就诞生了。请求的统一入口是前端控制器,通过URL映射,把请求路由到我们自己的Controller的方法上,并自动帮我们解析好入参,这样我们写起来就简单很多了。</p><p>最后,我们写回的数据不一定是HTML,也不一定要使用JSP做渲染,所以又抽象出来一个视图解析器,这样我们就可以根据需要灵活配置模板引擎,无需修改业务代码。</p><h2 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>Servlet是服务器小应用程序。用来完成B/S架构下，客户端请求的响应处理。平台独立，性能优良，能以线程方式运行。Servlet API为Servlet提供了统一的编程接口。Servlet一般在容器中运行。常见的Servlet容器：Tomcat。</p><h3 id="Servlet常用方法"><a href="#Servlet常用方法" class="headerlink" title="Servlet常用方法"></a>Servlet常用方法</h3><p>最常用的是doGet() 和 doPost() 方法以及 service() 方法，其中 service() 是由容器调用，在适当时候还会调用 doGet() ，doPost() 等方法。</p><h3 id="Tomcat下载安装及配置"><a href="#Tomcat下载安装及配置" class="headerlink" title="Tomcat下载安装及配置"></a>Tomcat下载安装及配置</h3><h4 id="1-进入Tomcat官网下载压缩包"><a href="#1-进入Tomcat官网下载压缩包" class="headerlink" title="1. 进入Tomcat官网下载压缩包"></a>1. 进入Tomcat官网下载压缩包</h4><p><a href="https://tomcat.apache.org">Tomcat官网链接</a></p><p><img src="/imges/%E7%AC%AC%E5%9B%9B%E5%91%A8java%E9%A2%84%E4%B9%A0/image-20230414133935426.png"></p><h4 id="2-解压"><a href="#2-解压" class="headerlink" title="2. 解压"></a>2. 解压</h4><p>以下是Tomcat解压后的目录结构</p><table><thead><tr><th align="left">子目录</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">bin</td><td align="left">放置的是Tomcat一些相关的命令，启动的命令（startup）和关闭的命令（shutdown）等等</td></tr><tr><td align="left">conf</td><td align="left">（configure）配置文件</td></tr><tr><td align="left">lib</td><td align="left">（library）库，依赖的 jar包</td></tr><tr><td align="left">logs</td><td align="left">Tomcat 的日志文件</td></tr><tr><td align="left">temp</td><td align="left">Tomcat的临时文件夹</td></tr><tr><td align="left">webapps</td><td align="left">可执行的项目。默认作为存放开发项目的目录</td></tr><tr><td align="left">work</td><td align="left">存放由 jsp翻译成的 .java源文件以及编译的 .class字节码文件(jsp –&gt;java –&gt;class)</td></tr></tbody></table><h4 id="3-测试Tomcat"><a href="#3-测试Tomcat" class="headerlink" title="3.测试Tomcat"></a>3.测试Tomcat</h4><p>双击startup.bat文件</p><p><img src="/imges/%E7%AC%AC%E5%9B%9B%E5%91%A8java%E9%A2%84%E4%B9%A0/image-20230414135052584.png"></p><p><img src="/imges/%E7%AC%AC%E5%9B%9B%E5%91%A8java%E9%A2%84%E4%B9%A0/image-20230414140619970.png" alt="控制台状态"></p><p>之后打开浏览器，在地址栏输入：【<strong><a href="http://localhost:8080/">http://localhost:8080</a></strong>】或者【<strong><a href="http://127.0.0.1:8080/">http://127.0.0.1:8080</a></strong>】<br>如果看到Tomcat自带的一个JSP页面，则表示安装成功<br>8080是默认端口号，如果和其他软件冲突，去配置文件中server.xml中修改端口号即可</p><h4 id="4-在idea中配置Tomcat"><a href="#4-在idea中配置Tomcat" class="headerlink" title="4. 在idea中配置Tomcat"></a>4. 在idea中配置Tomcat</h4><ol><li>File → setting</li></ol><p><img src="/imges/%E7%AC%AC%E5%9B%9B%E5%91%A8java%E9%A2%84%E4%B9%A0/image-20230414155643557.png"></p><ol start="2"><li>Build,Execution,Deployment → + → Tomcat Server</li></ol><p><img src="/imges/%E7%AC%AC%E5%9B%9B%E5%91%A8java%E9%A2%84%E4%B9%A0/image-20230414155818730.png"></p><ol start="3"><li>选择Tomcat根目录即可</li></ol><p><img src="/imges/%E7%AC%AC%E5%9B%9B%E5%91%A8java%E9%A2%84%E4%B9%A0/image-20230414155930849.png"></p><ol start="4"><li>然后选择Run → Edit Configurations</li></ol><p></p><p><img src="/imges/%E7%AC%AC%E5%9B%9B%E5%91%A8java%E9%A2%84%E4%B9%A0/image-20230414160425616.png"></p><ol start="5"><li>“+” → Tomcat Server → Local</li></ol><p><img src="/imges/%E7%AC%AC%E5%9B%9B%E5%91%A8java%E9%A2%84%E4%B9%A0/image-20230414160554013.png"></p><ol start="6"><li>OK即可</li></ol><p><img src="/imges/%E7%AC%AC%E5%9B%9B%E5%91%A8java%E9%A2%84%E4%B9%A0/image-20230414160724182.png"></p><ol start="7"><li>导入包</li></ol><p>选择File → Project Structure</p><p><img src="/imges/%E7%AC%AC%E5%9B%9B%E5%91%A8java%E9%A2%84%E4%B9%A0/image-20230414171658833.png"></p><ol start="8"><li>选择 Module → + Library</li></ol><p><img src="/imges/%E7%AC%AC%E5%9B%9B%E5%91%A8java%E9%A2%84%E4%B9%A0/image-20230414171842721.png"></p><p><img src="/imges/%E7%AC%AC%E5%9B%9B%E5%91%A8java%E9%A2%84%E4%B9%A0/image-20230414171924246.png"></p><ol start="10"><li>选择添加即可</li></ol><h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><p>1.加载阶段</p><p>Tomcat从文件系统，远程文件系统或其他网络服务中通过类加载器来加载Servlet类到内存，并调用Servlet的默认构造方法(不带参构造器)</p><p>2.初始化阶段</p><p>在获得servlet实例后调用init()方法初始化该实例</p><p>3.响应请求阶段</p><p>调用service()方法，根据请求方式的不同，调用doGet() 或者 doPost()</p><p>4.终止阶段</p><p>servlet摧毁时调用destroy()方法</p><p><img src="/imges/%E7%AC%AC%E5%9B%9B%E5%91%A8java%E9%A2%84%E4%B9%A0/image-20230414172353872.png" alt="具体方法图"></p><h3 id="servlet实例介绍"><a href="#servlet实例介绍" class="headerlink" title="servlet实例介绍"></a>servlet实例介绍</h3><h4 id="1-新建项目-使用maven"><a href="#1-新建项目-使用maven" class="headerlink" title="1. 新建项目(使用maven)"></a>1. 新建项目(使用maven)</h4><p>选择webapp</p><p><img src="/imges/%E7%AC%AC%E5%9B%9B%E5%91%A8java%E9%A2%84%E4%B9%A0/image-20230415103149720.png">\</p><h4 id="2-Webapp"><a href="#2-Webapp" class="headerlink" title="2. Webapp"></a>2. Webapp</h4><p><img src="/imges/%E7%AC%AC%E5%9B%9B%E5%91%A8java%E9%A2%84%E4%B9%A0/image-20230415103437921.png" alt="image-20230415103437921"></p><ol><li>以下是webapp的目录结构</li></ol><p>webapproot<br> &amp;nbsp; &amp;nbsp; |——WEB-INF<br> &amp;nbsp; &amp;nbsp;          |——classes(存放字节码)<br> &amp;nbsp; &amp;nbsp;          |——lib(第三方jar包)<br> &amp;nbsp; &amp;nbsp;          |——web.xml(注册Servlet配置文件)<br> &amp;nbsp; &amp;nbsp; |——html<br> &amp;nbsp; &amp;nbsp; |——css<br> &amp;nbsp; &amp;nbsp; |——javascript<br> &amp;nbsp; &amp;nbsp; |——image<br> &amp;nbsp; &amp;nbsp; ….</p><ol start="2"><li>WEB-INF具体内容</li><li>WEB-INF的作用<br>/WEB-INF/web.xml<br>  Web应用程序配置文件，描述了 servlet 和其他的应用组件配置及命名规则。<br>/WEB-INF/classes/<br>  包含了站点所有用的 class 文件，包括 servlet class 和非servlet class，他们不能包含在 .jar文件中。<br>/WEB-INF/lib/<br>  存放web应用需要的各种JAR文件，放置仅在这个应用中要求使用的jar文件,如数据库驱动jar文件。<br>/WEB-INF/src/<br>源码目录，按照包名结构放置各个 Java 文件。<br>/WEB-INF/database.properties<br>数据库配置文件<br>/WEB-INF/tags/<br>  存放了自定义标签文件，该目录并不一定为 tags，可以根据自己的喜好和习惯为自己的标签文件库命名，当使用自定义的标签文件库名称时，在使用标签文件时就必须声明正确的标签文件库路径。例如：当自定义标签文件库名称为 simpleTags 时，在使用 simpleTags 目录下的标签文件时，就必须在 jsp 文件头声明为：&lt;%@ taglibprefix=”tags” tagdir=”/WEB-INF /simpleTags” % &gt;。<br>  /WEB-INF/jsp/<br>  jsp 文件的存放位置。改目录没有特定的声明，同样，可以根据自己的喜好与习惯来命名。此目录主要存放的是 jsp 1.2 以下版本的文件，为区分 jsp 2.0 文件，通常使用 jsp 命名，当然你也可以命名为 jspOldEdition 。</li></ol><h4 id="3-配置依赖"><a href="#3-配置依赖" class="headerlink" title="3. 配置依赖"></a>3. 配置依赖</h4><ol><li>导入Tomcat下的api包</li></ol><p><img src="/imges/%E7%AC%AC%E5%9B%9B%E5%91%A8java%E9%A2%84%E4%B9%A0/image-20230415104009102.png"></p><ol start="2"><li>添加运行配置</li></ol><p><img src="/imges/%E7%AC%AC%E5%9B%9B%E5%91%A8java%E9%A2%84%E4%B9%A0/image-20230415104514116.png"></p><p><img src="/imges/%E7%AC%AC%E5%9B%9B%E5%91%A8java%E9%A2%84%E4%B9%A0/image-20230415104628022.png"></p><p><img src="/imges/%E7%AC%AC%E5%9B%9B%E5%91%A8java%E9%A2%84%E4%B9%A0/image-20230415104722889.png"></p><h4 id="4-新建java文件-继承HttpServlet-重写doGet-doPost…方法"><a href="#4-新建java文件-继承HttpServlet-重写doGet-doPost…方法" class="headerlink" title="4. 新建java文件,继承HttpServlet,重写doGet,doPost…方法"></a>4. 新建java文件,继承HttpServlet,重写doGet,doPost…方法</h4><p><img src="/imges/%E7%AC%AC%E5%9B%9B%E5%91%A8java%E9%A2%84%E4%B9%A0/image-20230415105824194.png" alt="image-20230415105824194"></p><ol start="5"><li>运行即可</li></ol><p>贴一个Error : java 不支持发行版本5的<a herf="https://blog.csdn.net/qq_22076345/article/details/82392236">解决方式</a></p><h3 id="Http-Servlet类介绍"><a href="#Http-Servlet类介绍" class="headerlink" title="Http Servlet类介绍"></a>Http Servlet类介绍</h3><p>在实际开发中，一般都是通过继承HttpServlet类的方式去实现Servlet程序。这里对其进行简单介绍</p><p><img src="/imges/%E7%AC%AC%E5%9B%9B%E5%91%A8java%E9%A2%84%E4%B9%A0/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1plcm9uR29k,size_16,color_FFFFFF,t_70.png" alt="网图 侵删"></p><p>Servlet接口有两个实现类，GenerricServlet和HttpServlet，其中后者是前者的子类，它在原有基础上添加了一些HTTP协议处理方法，它比GenerricServlet功能更强大，所以我们一般将自己的类继承自HttpServlet，并重写doGet方法和doPost方法，不需要重写Service方法。</p><h2 id="MVC"><a href="#MVC" class="headerlink" title="MVC"></a>MVC</h2><p>MVC(Model View Controller)是一种软件设计的框架模式，它采用模型(Model)-视图(View)-控制器(controller)的方法把业务逻辑、数据与界面显示分离。把众多的业务逻辑聚集到一个部件里面，当然这种比较官方的解释是不能让我们足够清晰的理解什么是MVC的。用通俗的话来讲，MVC的理念就是把数据处理、数据展示(界面)和程序/用户的交互三者分离开的一种编程模式。</p><h3 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h3><p>图示如下</p><p><img src="/imges/%E7%AC%AC%E5%9B%9B%E5%91%A8java%E9%A2%84%E4%B9%A0/2a71597b61be4108bff2c8ba1868a94a.png" alt="网图 侵删"></p><h2 id="jar-包介绍、如何导入使用"><a href="#jar-包介绍、如何导入使用" class="headerlink" title="jar 包介绍、如何导入使用"></a>jar 包介绍、如何导入使用</h2><h3 id="jar包介绍"><a href="#jar包介绍" class="headerlink" title="jar包介绍"></a>jar包介绍</h3><p>jar包是JAVA文件的压缩包，将写好的类、各种资源压缩到jar包里面，所以在导入jar包后可直接调用里面的类、使用里面的资源。</p><h3 id="jar包下载"><a href="#jar包下载" class="headerlink" title="jar包下载"></a>jar包下载</h3><p>推荐网站:maven官网：<a href="https://mvnrepository.com/">https://mvnrepository.com/</a></p><p>搜索下载即可</p><h3 id="jar包导入"><a href="#jar包导入" class="headerlink" title="jar包导入"></a>jar包导入</h3><p>项目下新建文件夹lib,将包放入其中</p><p>然后右键包选择 添加为库 即可</p><p>中文在插件市场中下载</p><p><img src="/imges/%E7%AC%AC%E5%9B%9B%E5%91%A8java%E9%A2%84%E4%B9%A0/J1nzESpq6M.png"></p>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> 预习作业 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第三周java预习</title>
      <link href="/2023/04/05/di-san-zhou-java-yu-xi/"/>
      <url>/2023/04/05/di-san-zhou-java-yu-xi/</url>
      
        <content type="html"><![CDATA[<h3 id="Java-IO"><a href="#Java-IO" class="headerlink" title="Java IO"></a>Java IO</h3><p>其中 I 是 input, O 是output, 所以Java中IO是以流为基础进行输入输出(指内存)的.</p><h4 id="首先介绍一下流是什么"><a href="#首先介绍一下流是什么" class="headerlink" title="首先介绍一下流是什么"></a>首先介绍一下流是什么</h4><h5 id="流"><a href="#流" class="headerlink" title="流"></a>流</h5><p>流是一个很形象的概念，当程序需要读取数据的时候，就会开启一个通向数据源的流，这个数据源可以是文件，内存，或是网络连接。类似的，当程序需要写入数据的时候，就会开启一个通向目的地的流。这时候你就可以想象数据好像在这其中“流”动一样。</p><h5 id="数据源"><a href="#数据源" class="headerlink" title="数据源"></a>数据源</h5><p>数据的来源，是提供某种所需要数据的器件或原始媒体。</p><h4 id="接下来了解一下IO涉及的设备文件"><a href="#接下来了解一下IO涉及的设备文件" class="headerlink" title="接下来了解一下IO涉及的设备文件"></a>接下来了解一下IO涉及的设备文件</h4><h5 id="常见的设备文件"><a href="#常见的设备文件" class="headerlink" title="常见的设备文件"></a>常见的设备文件</h5><p>文件、控制台、网络链接等</p><h5 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h5><h5 id="根据流的方向"><a href="#根据流的方向" class="headerlink" title="(根据流的方向)"></a>(根据流的方向)</h5><ul><li>数据源对象：有能力产出数据</li></ul><ul><li>接收端对象：有能力接收数据</li></ul><h5 id="根据数据传输单位"><a href="#根据数据传输单位" class="headerlink" title="(根据数据传输单位)"></a>(根据数据传输单位)</h5><ul><li>字节流: 以字节为单位传输数据的流</li><li>字符流: 以字符为单位传输数据的流</li></ul><h5 id="根据功能"><a href="#根据功能" class="headerlink" title="(根据功能)"></a>(根据功能)</h5><ul><li><p>节点流: 用于直接操作目标设备的流</p></li><li><p>过滤流: 是对一个已存在的流的链接和封装，通过对数据进行处理为程序提供功能强大、灵活的读写功能。</p></li></ul><h4 id="为什么要使用IO"><a href="#为什么要使用IO" class="headerlink" title="为什么要使用IO"></a>为什么要使用IO</h4><p>​JAVA把这些不同来源和目标的数据都统一抽象为数据流。Java语言的输入输出功能是十分强大而灵活的，美中不足的是看上去输入输出的代码并不是很简洁，因为你往往需要包装许多不同的对象。</p><p>​在Java类库中，IO部分的内容是很庞大的，因为它涉及的领域很广泛:标准输入输出，文件的操作，网络上的数据流，字符串流，对象流，zip文件流。</p><h4 id="使用IO时应注意的事"><a href="#使用IO时应注意的事" class="headerlink" title="使用IO时应注意的事"></a>使用IO时应注意的事</h4><h5 id="关于字符类库和字节类库的选择"><a href="#关于字符类库和字节类库的选择" class="headerlink" title="关于字符类库和字节类库的选择"></a>关于字符类库和字节类库的选择</h5><p>首选尽量尝试Reader和Writer, 如果程序代码无法成功编译, 我们就不得不使用面向字节的类库.</p><h5 id="介绍Java-IO包的类"><a href="#介绍Java-IO包的类" class="headerlink" title="介绍Java IO包的类"></a>介绍Java IO包的类</h5><table><thead><tr><th>处理流</th><th>who</th><th>个数</th><th>功能</th></tr></thead><tbody><tr><td>缓冲区</td><td>Buffered开头的类</td><td>4</td><td>可将流放在缓冲区内操作</td></tr><tr><td>转化流</td><td>InputStreamReader / OutputStreamWriter</td><td>2</td><td>可将字节流转化为字符流</td></tr><tr><td>基本类型</td><td>DataXXXStream</td><td>2</td><td>可传输基本类型数据</td></tr><tr><td>对象流</td><td>ObjectXXXStream</td><td>2</td><td>可传输对象类型数据(序列化)</td></tr><tr><td>打印流</td><td>PrintStream / PrintWriter</td><td>2</td><td>包含print和println的输出流</td></tr><tr><td>合并流</td><td>SequenceInputStream</td><td>1</td><td>可逻辑串联其他输入流</td></tr><tr><td>行号读入流</td><td>LineNumberReader</td><td>1</td><td>可得到一个携带行号的字符读入流</td></tr><tr><td>推回输入流</td><td>PushbackInputStream / PushbackReader</td><td>2</td><td>可将输入流push back或unread一个字节</td></tr><tr><td>字符串读写流</td><td>StringWriter / StringReader</td><td>2</td><td>可在缓冲区读写字符串</td></tr></tbody></table><h4 id="IO流对象"><a href="#IO流对象" class="headerlink" title="IO流对象"></a>IO流对象</h4><h5 id="File类"><a href="#File类" class="headerlink" title="File类"></a>File类</h5><pre class="line-numbers language-JAVA" data-language="JAVA"><code class="language-JAVA">public class File extends Object implements Serializable, Comparable&lt;File&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以看到 File 类实现了Serializable、 Comparable，说明它是支持序列化和排序的。</p><p>File类是用来操作文件的类，但它不能操作文件中的数据。</p><h6 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h6><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>File(File parent, String child)</td><td>根据 parent 抽象路径名和 child 路径名字符串创建一个新 File 实例</td></tr><tr><td>File(String pathname)</td><td>通过将给定路径名字符串转换为抽象路径名来创建一个新 File 实例</td></tr><tr><td>File(String parent, String child)</td><td>根据 parent 路径名字符串和 child 路径名字符串创建一个新 File 实例</td></tr><tr><td>File(URI uri)</td><td>通过将给定的 file: URI 转换为一个抽象路径名来创建一个新的 File 实例。</td></tr></tbody></table><h6 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h6><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>createNewFile()</td><td>当且仅当不存在具有此抽象路径名指定名称的文件时，不可分地创建一个新的空文件</td></tr><tr><td>delete()</td><td>删除此抽象路径名表示的文件或目录</td></tr><tr><td>exists()</td><td>测试此抽象路径名表示的文件或目录是否存在</td></tr><tr><td>getAbsoluteFile()</td><td>返回此抽象路径名的绝对路径名形式</td></tr><tr><td>getAbsolutePath()</td><td>返回此抽象路径名的绝对路径名字符串。</td></tr><tr><td>length()</td><td>返回由此抽象路径名表示的文件的长度</td></tr><tr><td>mkdir()</td><td>创建此抽象路径名指定的目录。</td></tr></tbody></table><h5 id="字节流"><a href="#字节流" class="headerlink" title="字节流"></a>字节流</h5><p>InputStream与OutputStream是两个抽象类，是字节流的基类，所有具体的字节流实现类都是分别继承了这两个类。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">InputStream</span> <span class="token keyword">extends</span> <span class="token class-name">Object</span> <span class="token keyword">implements</span> <span class="token class-name">Closeable</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>以 InputStream 为例，它继承了Object，实现了Closeable</p><h5 id="字符流"><a href="#字符流" class="headerlink" title="字符流"></a>字符流</h5><p>与字节流类似，字符流也有两个抽象基类，分别是Reader和Writer。其他的字符流实现类都是继承了这两个类。</p>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> 预习作业 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第二周java预习</title>
      <link href="/2023/03/30/di-er-zhou-java-yu-xi/"/>
      <url>/2023/03/30/di-er-zhou-java-yu-xi/</url>
      
        <content type="html"><![CDATA[<h3 id="这次主题是java异常类-常用类-容器-泛型"><a href="#这次主题是java异常类-常用类-容器-泛型" class="headerlink" title="这次主题是java异常类,常用类,容器,泛型."></a>这次主题是java异常类,常用类,容器,泛型.</h3><h4 id="java异常类"><a href="#java异常类" class="headerlink" title="java异常类"></a>java异常类</h4><p>Java中的异常类是一种用于在程序运行期间发生错误时抛出错误信息的机制。Java中的异常类都是从<code>Throwable</code>类继承而来的，它有两个主要的子类：<code>Exception</code>和<code>Error</code>。</p><p><code>Exception</code>类表示的是程序中预期的异常情况，可以通过程序进行处理和捕捉，因此它也被称为“受检异常”（checked exception）。<code>Exception</code>类下面有很多子类，包括<code>IOException</code>、<code>SQLException</code>等等，它们代表了程序中可能出现的各种异常情况，比如文件读写异常、数据库操作异常等。</p><p><code>Error</code>类则表示的是程序中不可预期的错误，通常是由于系统级别的问题导致的，例如内存不足、线程死锁等，因为这些错误无法通过程序来处理和恢复，所以它也被称为“非受检异常”（unchecked exception）。<code>Error</code>类下面有很多子类，比如<code>OutOfMemoryError</code>、<code>StackOverflowError</code>等等。</p><p>Java中还有一个<code>RuntimeException</code>类，它是<code>Exception</code>类的一个子类，但是与其他<code>Exception</code>不同的是，它不需要在程序中进行显式的捕捉和处理，因为它通常是由程序逻辑错误导致的，例如空指针异常、数组越界异常等等。如果程序中出现了这些异常，可以通过改进程序逻辑来避免这些异常的发生。</p><p>在Java程序中，可以使用<code>try-catch</code>语句来捕捉和处理异常。</p><h6 id="例如："><a href="#例如：" class="headerlink" title="例如："></a>例如：</h6><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">try</span> <span class="token punctuation">{</span><span class="token comment">// 可能会抛出异常的代码</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 处理异常的代码</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="具体实例"><a href="#具体实例" class="headerlink" title="具体实例:"></a>具体实例:</h6><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">try</span> <span class="token punctuation">{</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ArrayIndexOutOfBoundsException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"数组越界异常"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="java常用类"><a href="#java常用类" class="headerlink" title="java常用类"></a>java常用类</h4><p>Java提供了许多常用类库，这些类库包括了各种数据类型、算法和数据结构等，下面介绍一些常用的Java类：</p><ol><li><p><code>java.lang.String</code>类：用于表示字符串，是Java中最常用的类之一，提供了许多字符串操作方法。</p><h5 id="java-string类实例"><a href="#java-string类实例" class="headerlink" title="java string类实例"></a>java string类实例</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">"Hello World"</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 11</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 W</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p><code>java.lang.Math</code>类：提供了一系列静态方法，用于进行数学计算，包括三角函数、指数函数、对数函数等等。</p></li><li><p><code>java.util.ArrayList</code>类：用于表示可变长度的数组，可以在运行时动态添加、删除和修改元素。</p></li><li><p><code>java.util.HashMap</code>类：用于表示键值对，可以用来存储、查找和操作数据，是Java中最常用的数据结构之一。</p></li><li><p><code>java.util.Date</code>类：用于表示日期和时间，提供了日期和时间的各种操作方法，包括日期格式化、日期比较等等。</p></li><li><p><code>java.util.Calendar</code>类：用于表示日期和时间，提供了许多与日期和时间相关的操作方法，包括日期计算、时间比较等等。</p></li><li><p><code>java.io.File</code>类：用于表示文件和目录，提供了许多文件和目录操作方法，包括文件读写、目录创建、文件删除等等。</p></li><li><p><code>java.util.Scanner</code>类：用于读取用户输入的数据，提供了许多读取不同类型数据的方法，包括整数、浮点数、字符串等等。</p></li><li><p><code>java.util.Random</code>类：用于生成随机数，提供了各种随机数生成方法，包括整数、浮点数、布尔值等等。</p></li><li><p><code>java.util.Collections</code>类：提供了一系列静态方法，用于对集合进行操作，比如排序、查找、反转等等。</p></li></ol><p>以上是Java中一些常用的类，当然Java中还有很多其他有用的类，这些类都可以通过Java官方文档进行查找和学习。</p><h4 id="java容器"><a href="#java容器" class="headerlink" title="java容器"></a>java容器</h4><p>Java容器是一组数据结构的实现，用于存储、管理和操作Java对象，它们是Java集合框架的一部分，提供了不同的接口和实现来满足各种不同的需求。Java容器可以分为以下几类：</p><ol><li>List容器：List是一种有序集合，可以存储重复元素，常用的实现类包括ArrayList、LinkedList、Vector等。</li><li>Set容器：Set是一种无序集合，不允许存储重复元素，常用的实现类包括HashSet、LinkedHashSet、TreeSet等。</li><li>Map容器：Map是一种键值对集合，可以存储重复的值但不允许重复的键，常用的实现类包括HashMap、LinkedHashMap、TreeMap等。</li><li>Queue容器：Queue是一种先进先出（FIFO）的队列，常用的实现类包括LinkedList、PriorityQueue等。</li><li>Stack容器：Stack是一种后进先出（LIFO）的栈，常用的实现类是Stack。</li></ol><p>Java容器提供了各种方法来添加、删除、查找和排序元素，可以根据需求选择合适的容器类型和实现类。在实际应用中，通常使用泛型来指定容器中存储的数据类型，以提高代码的可读性和类型安全性。</p><h5 id="list使用实例"><a href="#list使用实例" class="headerlink" title="list使用实例"></a>list使用实例</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"Java"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"Python"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"C++"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 Python</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="java泛型"><a href="#java泛型" class="headerlink" title="java泛型"></a>java泛型</h4><p>Java泛型是Java SE 5中引入的特性，用于提供类型安全性和可重用性，它允许在编译时检查程序中的类型安全性，并提供了一种通用的机制来创建通用代码。Java泛型通过使用参数化类型来实现，参数化类型是指类型中包含一个或多个类型参数的类型。</p><p>在Java中，泛型可以应用于类、接口、方法和数组，它们都可以使用类型参数来定义。泛型的核心概念是类型变量和类型通配符：</p><ol><li>类型变量：在定义泛型类或方法时，可以使用类型变量来表示任意类型，类型变量用尖括号“&lt; &gt;”包围，例如：“<t>”表示一个类型变量。</t></li><li>类型通配符：在使用泛型类或方法时，可以使用类型通配符来限制泛型类型的范围，类型通配符用问号“? ”表示，例如：“&lt;? extends Number&gt;”表示只能接受Number及其子类类型的参数。</li></ol><h5 id="Java泛型的优点包括："><a href="#Java泛型的优点包括：" class="headerlink" title="Java泛型的优点包括："></a>Java泛型的优点包括：</h5><ol><li>提供了类型安全性，可以在编译时检查程序中的类型安全性，避免了类型转换异常等问题。</li><li>提高了代码的可读性和可维护性，可以使用泛型来减少代码的重复性和冗余性。</li><li>提供了更高的抽象层次，可以使用泛型来编写通用的代码，提高了代码的重用性和灵活性。</li></ol><p>在实际应用中，Java泛型经常用于集合类和算法类的实现中，可以通过泛型来避免类型转换和类型检查等问题。同时，Java泛型也是Java SE 5以后版本的重要特性之一，需要程序员们熟练掌握。</p><h5 id="java泛型实例"><a href="#java泛型实例" class="headerlink" title="java泛型实例"></a>java泛型实例</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Box</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">T</span> t<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">T</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>t <span class="token operator">=</span> t<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> t<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token class-name">Box</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> box <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Box</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>box<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>box<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="关注浅夏summer谢谢喵"><a href="#关注浅夏summer谢谢喵" class="headerlink" title="关注浅夏summer谢谢喵!"></a>关注浅夏summer谢谢喵!</h1>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> 预习作业 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于whisper和chat做翻译小结</title>
      <link href="/2023/03/27/guan-yu-whisper-he-chat-zuo-fan-yi-xiao-jie/"/>
      <url>/2023/03/27/guan-yu-whisper-he-chat-zuo-fan-yi-xiao-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="首先这次实验成功了一半"><a href="#首先这次实验成功了一半" class="headerlink" title="首先这次实验成功了一半"></a>首先这次实验成功了一半</h2><h3 id="因为本身显卡性能不足没法跑whisper的large-v2模型-所以文本本身就会有部分问题-本人使用medium模型"><a href="#因为本身显卡性能不足没法跑whisper的large-v2模型-所以文本本身就会有部分问题-本人使用medium模型" class="headerlink" title="因为本身显卡性能不足没法跑whisper的large-v2模型,所以文本本身就会有部分问题(本人使用medium模型)"></a>因为本身显卡性能不足没法跑whisper的large-v2模型,所以文本本身就会有部分问题(本人使用medium模型)</h3><h3 id="以下为参考-词源-一花依世界-–鹿乃"><a href="#以下为参考-词源-一花依世界-–鹿乃" class="headerlink" title="以下为参考 词源 : 一花依世界 –鹿乃"></a>以下为参考 词源 : 一花依世界 –鹿乃</h3><hr><h4 id="whisper生成原文"><a href="#whisper生成原文" class="headerlink" title="whisper生成原文"></a>whisper生成原文</h4><p>【歌】浮く椅子に呼び起こされた私風香る羽織を連れて出かけて雲へとる水に誘われ花びらのいかたを乗せ漂ってそよ風が羽を優しくなでる咲きに寄った花のような微笑みを手のひらすくうし水に不安の空でいる間不意に魔法溶けちゃった世界がとたに変わった未来像回ってこの先何がある?教えて【歌】街の中行き交う人の波耳渡せば祭りのようなにぎわい少しだけショロボ味わって一口で心の中とろけそうだ未来のおとぎ話の世界に踏み入ってこの先何がある?教えて【歌】見上げた満月に密かに願い込めたこの時止まれるようにずっと同じ空の下【歌】落ち込んだ不安もあった戸惑った諦めたでも今君と共に歩く見知らぬ景色さえ何より大事にしたい落ち上げ放りほどに儚く消える夢でも見上げた星空に密かに願い込めた触れなくても感じて未来いつまでもそばに【歌】</p><hr><h4 id="ChatGPT翻译结果"><a href="#ChatGPT翻译结果" class="headerlink" title="ChatGPT翻译结果"></a>ChatGPT翻译结果</h4><p>【歌】被浮动的椅子唤醒的我，穿着散发芬芳的羽织物出门，在云朵中漂浮，被水引领着，像花瓣一</p><p>样轻轻飘荡，微风温柔地拂过我的翅膀，我向着盛开的花儿微笑，手心捧起水，心中有着不安。就在</p><p>这个时候，魔法突然消散，世界瞬间改变了，我回想起未来的景象，不知道前方会有什么。请告诉</p><p>我。</p><p>【歌】在城市的街头，人们来来往往，像是一个庆典，我沐浴在这些热闹的氛围中，品尝着一点点的</p><p>异国情调，一口咬下去，心里仿佛要融化。我踏进了一个未来童话的世界，不知道前方会有什么。请</p><p>告诉我。</p><p>【歌】仰望满月，我暗自许愿，希望时间可以停止在这一刻，让我一直留在这片天空下。即使陷入落</p><p>寞和不安中，即使曾感到迷茫和放弃，现在，我与你共同走过，连未曾见过的景色，都是我最珍视</p><p>的。就算那些短暂的梦境像飘渺的泡影般消失，我仍然仰望着星空暗自许愿，感受着未来在身边，永</p><p>不离开。</p><p>【歌】</p><hr><p><strong>总结,与诗意化的歌词出入很大,但是大意并没有太大差距,而且因为本身传的是歌词,所以误差会更大.未来将会尝试large模型</strong></p><p>原文歌词文件可以去qq音乐\网易云直接搜索</p><p>以下提供网易云外链播放</p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&amp;id=1304665120&amp;auto=0&amp;height=66"></iframe>]]></content>
      
      
      <categories>
          
          <category> python小工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> whisper </tag>
            
            <tag> chats </tag>
            
            <tag> 翻译工程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Snooze</title>
      <link href="/2023/03/21/snooze/"/>
      <url>/2023/03/21/snooze/</url>
      
        <content type="html"><![CDATA[<h3 id="看看youtube"><a href="#看看youtube" class="headerlink" title="看看youtube"></a>看看youtube</h3><iframe width="800" height="450" src="https://www.youtube.com/embed/_gWn38pnmqI" title="snooze / wotaku feat. SHIKI" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen=""></iframe><iframe width="451" height="801" src="https://www.youtube.com/embed/FQ5koIrJqb8" title="人生リセットボタンぽちーw #shorts #ホロライブ #沙花叉クロヱ #tiktok" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen=""></iframe><h3 id="Twitch的neuro-sama也不错"><a href="#Twitch的neuro-sama也不错" class="headerlink" title="Twitch的neuro-sama也不错~!"></a>Twitch的neuro-sama也不错~!</h3>]]></content>
      
      
      <categories>
          
          <category> 测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一周java预习</title>
      <link href="/2023/03/21/di-yi-zhou-java-yu-xi/"/>
      <url>/2023/03/21/di-yi-zhou-java-yu-xi/</url>
      
        <content type="html"><![CDATA[<p>Java是一种面向对象的编程语言，具有封装、继承和多态三大特性。</p><h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><p>封装是指将数据和方法包装在类中，对外部世界隐藏内部实现细节，只提供公共接口。这样可以保证数据的安全性和代码的可维护性。</p><p>Java中，可以使用<a href="https://so.csdn.net/so/search?q=%E8%AE%BF%E9%97%AE%E4%BF%AE%E9%A5%B0%E7%AC%A6&amp;spm=1001.2101.3001.7020">访问修饰符</a>来控制类、属性和方法的访问权限。常用的访问修饰符有public、protected、default和private。</p><p>以下为示例代码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这段代码定义了一个名为”Person”的Java类。这个类有两个私有属性，分别是”name”和”age”，代表着一个人的姓名和年龄。这个类提供了一个构造方法，可以通过传入姓名和年龄来创建一个Person对象。类中还提供了getName()和getAge()方法，用于获取对象的姓名和年龄属性。同时也提供了setName()和setAge()方法，用于设置对象的姓名和年龄属性。</p><p>这个类的属性和方法都是封装的，即对外部不可见，只有通过公共方法来访问。这种封装性可以保证类的安全性，同时也使得类的实现者可以自由地修改实现方式而不影响类的使用者。</p><hr><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>继承是指一个类可以继承另一个类的属性和方法。被继承的类称为父类或超类，继承的类称为子类或<a href="https://so.csdn.net/so/search?q=%E6%B4%BE%E7%94%9F%E7%B1%BB&amp;spm=1001.2101.3001.7020">派生类</a>。</p><p>Java中，使用关键字extends来实现继承。子类可以继承父类的public和protected属性和方法，但不能继承private属性和方法。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">" is eating."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">bark</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">" is barking."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这段代码展示了Java中的继承机制。在这里，Dog类继承了Animal类，Animal类中的name属性被protected修饰，因此Dog类可以访问该属性。Dog类中的bark()方法是Dog类自己的方法，而eat()方法是从Animal类继承而来的。</p><hr><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><p>多态是指同一种行为具有多种不同的表现形式。在Java中，多态可以通过方法重载和方法重写来实现。</p><p>方法重载是指在同一个类中定义多个同名但参数列表不同的方法。Java编译器会根据方法的参数列表来选择调用哪个方法。</p><p>方法重写是指子类重写父类的方法。子类可以根据自己的需要重新定义父类的方法，但方法名、参数列表和返回值类型必须与父类的方法相同。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Shape</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Drawing a shape."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Circle</span> <span class="token keyword">extends</span> <span class="token class-name">Shape</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Drawing a circle."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Square</span> <span class="token keyword">extends</span> <span class="token class-name">Shape</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Drawing a square."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Shape</span> s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Circle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Shape</span> s2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Square</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                s1<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s2<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Shape类是一个抽象类，其中的draw()方法是一个抽象方法。Circle类和Square类都继承了Shape类，并且都实现了draw()方法。在Main类中，我们创建了一个Shape类型的变量s1，并将其指向一个Circle类型的对象。同样地，我们创建了一个Shape类型的变量s2，并将其指向一个Square类型的对象。由于Circle类和Square类都是Shape类的子类，因此它们可以被赋值给Shape类型的变量。在调用s1.draw()和s2.draw()时，实际上调用的是Circle类和Square类中的draw()方法，这就是Java中的多态机制。</p><hr><h2 id="IDEA基本使用"><a href="#IDEA基本使用" class="headerlink" title="IDEA基本使用"></a>IDEA基本使用</h2><p>IntelliJ IDEA是一款由JetBrains开发的Java集成开发环境。它具有智能代码提示、代码自动补全、代码重构、版本控制等功能，可以大大提高开发效率。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a><strong>安装</strong></h2><p>可以从JetBrains官网下载IntelliJ IDEA的安装包，根据提示进行安装即可。</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>在安装完成后，打开IntelliJ IDEA，可以看到主界面。可以创建新的项目或打开已有的项目。</p><p>创建新的项目，可以选择项目类型、项目名称和项目路径。创建完成后，可以在项目中创建新的Java类或包。</p><p>编辑代码时，IntelliJ IDEA提供了很多快捷键和代码模板，可以大大提高编码效率。同时，IntelliJ IDEA还支持代码重构、版本控制、调试等功能。</p><hr><p>END</p>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> 预习作业 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
